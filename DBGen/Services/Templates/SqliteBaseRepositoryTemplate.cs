using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DBGen.Templates
{
    public class SqliteBaseRepositoryTemplate
    {
        public static string GetBaseTemplate() {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("using Dapper.Contrib.Extensions;");
            sb.AppendLine("using Dapper;");
            sb.AppendLine("using Microsoft.Data.Sqlite;");
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine();
            sb.AppendLine("namespace MyServer");
            sb.AppendLine("{");
            sb.AppendLine("public abstract class SqLiteBaseRepository<TEntity> where TEntity : class");
            sb.AppendLine("{");
            sb.AppendLine("public string DbFileName { get; set; }");
            sb.AppendLine("SqliteConnection _dbConnection;");
            sb.AppendLine();
            sb.AppendLine("SqliteConnection dbConnection");
            sb.AppendLine("{");
            sb.AppendLine("   get");
            sb.AppendLine(" {");
            sb.AppendLine("if (_dbConnection == null) _dbConnection = new SqliteConnection(\"Data Source = \"  DbFileName);");
            sb.AppendLine("return _dbConnection;");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine();
           sb.AppendLine();
         sb.AppendLine("protected virtual bool Delete(TEntity entity)");
            sb.AppendLine("{");
            sb.AppendLine("try");
            sb.AppendLine("{");
            sb.AppendLine("dbConnection.Open();");
            sb.AppendLine("return dbConnection.Delete(entity);");
            sb.AppendLine("}");
            sb.AppendLine("catch");
            sb.AppendLine("{");
            sb.AppendLine("  throw;");
            sb.AppendLine("}");
            sb.AppendLine("finally");
            sb.AppendLine("{");
            sb.AppendLine("if (dbConnection != null && dbConnection.State != System.Data.ConnectionState.Closed)");
            sb.AppendLine("dbConnection.Close();");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine();

         sb.AppendLine("protected virtual int DeleteById(int Id, String tableName)");
            sb.AppendLine("{");
            sb.AppendLine("try");
            sb.AppendLine("{");
            sb.AppendLine("dbConnection.Open();");
            sb.AppendLine("return dbConnection.Execute(\"Delete from \" + tableName + \" Where Id = \" + Id);");
            sb.AppendLine("}");
            sb.AppendLine("catch");
            sb.AppendLine("{");
            sb.AppendLine("throw;");
            sb.AppendLine("}");
            sb.AppendLine("finally");
            sb.AppendLine("{");
            sb.AppendLine("if (dbConnection != null && dbConnection.State != System.Data.ConnectionState.Closed)");
            sb.AppendLine("dbConnection.Close();");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("protected virtual Int32 Insert(TEntity entity)");
         sb.AppendLine("{");
            sb.AppendLine("try");
            sb.AppendLine("{");
            sb.AppendLine("return (Int32)dbConnection.Insert(entity);");
            sb.AppendLine("}");
            sb.AppendLine("catch");
            sb.AppendLine("{");
            sb.AppendLine("throw;");
            sb.AppendLine("}");
            sb.AppendLine("finally");
            sb.AppendLine("{");
            sb.AppendLine("if (dbConnection != null && dbConnection.State != System.Data.ConnectionState.Closed)");
            sb.AppendLine("dbConnection.Close();");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine();
         sb.AppendLine("protected virtual bool Update(TEntity entity)");
            sb.AppendLine("{");
            sb.AppendLine("try");
            sb.AppendLine("{");
            sb.AppendLine("return dbConnection.Update(entity);");
             sb.AppendLine("}");
            sb.AppendLine("catch");
            sb.AppendLine("{");
            sb.AppendLine("throw;");
            sb.AppendLine("}");
            sb.AppendLine("finally");
            sb.AppendLine("{");
            sb.AppendLine("if (dbConnection != null && dbConnection.State != System.Data.ConnectionState.Closed)");
            sb.AppendLine("dbConnection.Close();");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("protected virtual TEntity GetById(int Id)");
            sb.AppendLine("{");
            sb.AppendLine("try");
            sb.AppendLine("{");
            sb.AppendLine("return dbConnection.Get<TEntity>(Id);");
            sb.AppendLine("}");
            sb.AppendLine("catch");
            sb.AppendLine("{");
            sb.AppendLine("throw;");
            sb.AppendLine("}");
            sb.AppendLine("finally");
            sb.AppendLine("{");
            sb.AppendLine("if (dbConnection != null && dbConnection.State != System.Data.ConnectionState.Closed)");
            sb.AppendLine("dbConnection.Close();");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("protected virtual IEnumerable<TEntity> GetAll()");
            sb.AppendLine("{");
            sb.AppendLine("try");
            sb.AppendLine("{");
             sb.AppendLine("return dbConnection.GetAll<TEntity>();");
            sb.AppendLine("}");
            sb.AppendLine("catch");
            sb.AppendLine("{");
            sb.AppendLine("throw;");
            sb.AppendLine("}");
            sb.AppendLine("finally");
            sb.AppendLine("{");
            sb.AppendLine("if (dbConnection != null && dbConnection.State != System.Data.ConnectionState.Closed)");
            sb.AppendLine("dbConnection.Close();");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("protected virtual TEntity QuerySingle(String query)");
            sb.AppendLine("{");
            sb.AppendLine("try");
            sb.AppendLine("{");
            sb.AppendLine("return dbConnection.QuerySingleOrDefault<TEntity>(query);");
            sb.AppendLine("}");
            sb.AppendLine("catch");
            sb.AppendLine("{");
            sb.AppendLine("throw;");
            sb.AppendLine("}");
            sb.AppendLine("finally");
            sb.AppendLine("{");
            sb.AppendLine("if (dbConnection != null && dbConnection.State != System.Data.ConnectionState.Closed)");
            sb.AppendLine("dbConnection.Close();");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("protected virtual List<TEntity> QueryMultiple(String query)");
            sb.AppendLine("{");
            sb.AppendLine("try");
            sb.AppendLine("{");
            sb.AppendLine("return dbConnection.QueryMultiple(query).Read<TEntity>(true).AsList();");
            sb.AppendLine("}");
            sb.AppendLine("catch");
            sb.AppendLine("{");
            sb.AppendLine("throw;");
            sb.AppendLine("}");
            sb.AppendLine("finally");
            sb.AppendLine("{");
            sb.AppendLine("if (dbConnection != null && dbConnection.State != System.Data.ConnectionState.Closed)");
            sb.AppendLine("dbConnection.Close();");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine("}");
            return sb.ToString();
            }
            

    }
}
